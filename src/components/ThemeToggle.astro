---
// Componente para cambiar entre tema claro y oscuro
---

<div class="theme-toggle">
	<button 
		class="theme-btn theme-toggle-btn"
		type="button"
		aria-label="Cambiar tema"
		title="Cambiar entre tema claro y oscuro"
	>
		<span class="sun-icon">‚òÄÔ∏è</span>
		<span class="moon-icon">üåô</span>
	</button>
</div>

<script>
	// Tipos para el tema
	type Theme = 'light' | 'dark';

	// Funci√≥n para obtener el tema preferido
	function getPreferredTheme(): Theme {
		// Primero verificar si hay un tema guardado
		if (typeof localStorage !== 'undefined') {
			const savedTheme = localStorage.getItem('theme') as Theme;
			if (savedTheme && (savedTheme === 'light' || savedTheme === 'dark')) {
				return savedTheme;
			}
		}
		
		// Si no hay tema guardado, usar la preferencia del sistema
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	}

	// Funci√≥n para aplicar el tema
	function setTheme(theme: Theme): void {
		document.documentElement.setAttribute('data-theme', theme);
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem('theme', theme);
		}
		
		// Actualizar el estado visual de todos los botones
		const buttons = document.querySelectorAll('.theme-toggle-btn');
		buttons.forEach(button => {
			button.setAttribute('aria-pressed', theme === 'dark' ? 'true' : 'false');
			button.classList.toggle('dark-mode', theme === 'dark');
		});
	}

	// Funci√≥n para alternar tema
	function toggleTheme(): void {
		const currentTheme = document.documentElement.getAttribute('data-theme') as Theme;
		const newTheme: Theme = currentTheme === 'dark' ? 'light' : 'dark';
		setTheme(newTheme);
	}

	// Inicializar el tema al cargar la p√°gina
	function initTheme(): void {
		const theme = getPreferredTheme();
		setTheme(theme);
		
		// A√±adir event listener a todos los botones
		const buttons = document.querySelectorAll('.theme-toggle-btn');
		buttons.forEach(button => {
			button.addEventListener('click', toggleTheme);
		});
		
		// Escuchar cambios en la preferencia del sistema
		window.matchMedia('(prefers-color-scheme: dark)')
			.addEventListener('change', (e: MediaQueryListEvent) => {
				// Solo aplicar si no hay tema guardado por el usuario
				if (typeof localStorage === 'undefined' || !localStorage.getItem('theme')) {
					setTheme(e.matches ? 'dark' : 'light');
				}
			});
	}

	// Aplicar tema inmediatamente para evitar flash
	const theme = getPreferredTheme();
	document.documentElement.setAttribute('data-theme', theme);

	// Inicializar cuando el DOM est√© listo
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initTheme);
	} else {
		initTheme();
	}

	// Para navegaci√≥n con Astro (SPA mode)
	document.addEventListener('astro:page-load', initTheme);
</script>

<style>
	.theme-toggle {
		display: flex;
		align-items: center;
		margin-left: 1rem;
	}

	.theme-btn {
		background: transparent;
		border: 2px solid rgba(var(--text-secondary), 0.3);
		border-radius: 50px;
		padding: 8px 12px;
		cursor: pointer;
		display: flex;
		align-items: center;
		gap: 6px;
		font-size: 1.2rem;
		transition: all 0.3s ease;
		position: relative;
		overflow: hidden;
		min-width: 70px;
		height: 40px;
		justify-content: center;
	}

	.theme-btn:hover {
		border-color: var(--accent);
		background: rgba(var(--accent), 0.1);
		transform: scale(1.05);
	}

	.theme-btn:focus {
		outline: 2px solid var(--accent);
		outline-offset: 2px;
	}

	.theme-btn:active {
		transform: scale(0.95);
	}

	/* Iconos */
	.sun-icon, .moon-icon {
		position: absolute;
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
		display: flex;
		align-items: center;
		justify-content: center;
	}

	/* Estado inicial - tema claro (sol visible) */
	.theme-btn .sun-icon {
		opacity: 1;
		transform: translateX(0) rotate(0deg);
	}

	.theme-btn .moon-icon {
		opacity: 0;
		transform: translateX(20px) rotate(180deg);
	}

	/* Estado tema oscuro (luna visible) */
	.theme-btn.dark-mode .sun-icon {
		opacity: 0;
		transform: translateX(-20px) rotate(-180deg);
	}

	.theme-btn.dark-mode .moon-icon {
		opacity: 1;
		transform: translateX(0) rotate(0deg);
	}

	/* Animaci√≥n de resplandor para el bot√≥n */
	@keyframes glow {
		0%, 100% {
			box-shadow: 0 0 5px rgba(var(--accent), 0.3);
		}
		50% {
			box-shadow: 0 0 15px rgba(var(--accent), 0.5), 0 0 25px rgba(var(--accent), 0.3);
		}
	}

	.theme-btn:hover {
		animation: glow 2s infinite;
	}

	/* Responsive */
	@media (max-width: 720px) {
		.theme-toggle {
			margin-left: 0.3rem;
		}
		
		.theme-btn {
			min-width: 42px;
			height: 32px;
			padding: 4px 6px;
			font-size: 0.9rem;
			border-width: 1.5px;
		}
	}
	
	@media (max-width: 480px) {
		.theme-toggle {
			margin-left: 0.2rem;
		}
		
		.theme-btn {
			min-width: 38px;
			height: 28px;
			padding: 3px 4px;
			font-size: 0.8rem;
		}
	}

	/* Mejoras para accesibilidad */
	@media (prefers-reduced-motion: reduce) {
		.theme-btn,
		.sun-icon,
		.moon-icon {
			transition: none;
		}
		
		.theme-btn:hover {
			animation: none;
		}
	}
</style>