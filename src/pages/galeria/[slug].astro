---
import Layout from '../../layouts/BlogPost.astro';

export async function getStaticPaths() {
  return [
    { params: { slug: 'vs-torrejon' } },
    { params: { slug: 'vs-sauces' } },
    { params: { slug: 'entrenamiento' } },
    { params: { slug: 'vs-carabanchel' } },
    { params: { slug: 'celebracion' } },
    { params: { slug: 'concentracion' } }
  ];
}

// Importar explícitamente las 18 imágenes para que Astro genere URLs correctas
import t1 from '../../assets/fotos/vsTorrejon/lega-torre1.jpeg';
import t2 from '../../assets/fotos/vsTorrejon/lega-torre2.jpeg';
import t3 from '../../assets/fotos/vsTorrejon/lega-torre3.jpeg';
import t4 from '../../assets/fotos/vsTorrejon/lega-torre4.jpeg';
import t5 from '../../assets/fotos/vsTorrejon/lega-torre5.jpeg';
import t6 from '../../assets/fotos/vsTorrejon/lega-torre6.jpeg';
import t7 from '../../assets/fotos/vsTorrejon/lega-torre7.jpeg';
import t8 from '../../assets/fotos/vsTorrejon/lega-torre8.jpeg';
import t9 from '../../assets/fotos/vsTorrejon/lega-torre9.jpeg';
import t10 from '../../assets/fotos/vsTorrejon/lega-torre10.jpeg';
import t11 from '../../assets/fotos/vsTorrejon/lega-torre11.jpeg';
import t12 from '../../assets/fotos/vsTorrejon/lega-torre12.jpeg';
import t13 from '../../assets/fotos/vsTorrejon/lega-torre13.jpeg';
import t14 from '../../assets/fotos/vsTorrejon/lega-torre14.jpeg';
import t15 from '../../assets/fotos/vsTorrejon/lega-torre15.jpeg';
import t16 from '../../assets/fotos/vsTorrejon/lega-torre16.jpeg';
import t17 from '../../assets/fotos/vsTorrejon/lega-torre17.jpeg';
import t18 from '../../assets/fotos/vsTorrejon/lega-torre18.jpeg';

function getVsTorrejonPhotos() {
  const list = [t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18];
  return list.map((mod, idx) => ({
    src: (mod as any).default ?? (mod as any).src ?? mod,
    title: `VS Torrejón - Foto ${idx + 1}`,
    description: `Momento destacado del partido contra Torrejón Basket Azul (${idx + 1}/18)`
  }));
}

// Definir álbumes con sus fotos
const albumsData = {
  'vs-torrejon': {
    title: 'VS Torrejón Basket Azul',
    description: 'Jornada 2 - Victoria 60-57 contra Torrejón Basket Azul',
    photos: getVsTorrejonPhotos()
  },
  // 'vs-sauces': {
  //   title: 'VS Colegio Los Sauces',
  //   description: 'Jornada 3 - 4 de Octubre, gran partido del equipo',
  //   photos: []
  // },
  // 'entrenamiento': {
  //   title: 'Entrenamientos',
  //   description: 'Sesiones de entrenamiento semanal en el polideportivo',
  //   photos: []
  // },
  // 'vs-carabanchel': {
  //   title: 'VS Distrito Carabanchel',
  //   description: 'Jornada 4 - Próximo partido de la liga',
  //   photos: []
  // },
  // 'celebracion': {
  //   title: 'Celebración del Equipo',
  //   description: 'Momentos de celebración y convivencia del equipo',
  //   photos: []
  // },
  // 'concentracion': {
  //   title: 'Concentración Pre-liga',
  //   description: 'Preparación y concentración del equipo para la temporada',
  //   photos: []
  // }
};

const { slug } = Astro.params;
const album = albumsData[slug as keyof typeof albumsData];

if (!album) {
  return Astro.redirect('/404');
}

const hasPhotos = album.photos.length > 0;
---

<Layout
  title={`${album.title} - Galería JunStats`}
  description={album.description}
  pubDate={new Date()}
>
  <main class="album-page">
    <div class="album-hero">
      <h1>{album.title}</h1>
      <p>{album.description}</p>
      <div class="album-meta">
        <span class="photo-count">
          {hasPhotos ? `${album.photos.length} fotos` : 'Aún no hay fotos'}
        </span>
        <a href="/galeria" class="back-link">← Volver a la galería</a>
      </div>
    </div>

    <div class="album-gallery">
      {hasPhotos ? (
        <div class="photos-grid" id="photosGrid">
          {album.photos.map((photo, index) => (
            <div class="photo-item" data-index={index}>
              <img 
                src={photo.src} 
                alt={photo.title}
                loading="lazy"
                class="photo-thumbnail"
              />
              <div class="photo-overlay">
                <h3>{photo.title}</h3>
                <p>{photo.description}</p>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div class="no-photos-message">
          <div class="no-photos-content">
            <svg width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
              <circle cx="8.5" cy="8.5" r="1.5"/>
              <polyline points="21,15 16,10 5,21"/>
            </svg>
            <h3>Aún no hay fotos disponibles</h3>
            <p>Las fotos de este álbum se añadirán próximamente.</p>
            <a href="/galeria" class="back-button">Volver a la galería</a>
          </div>
        </div>
      )}
    </div>

    <!-- Modal para ver foto completa (solo si hay fotos) -->
    {hasPhotos && (
      <div id="photoModal" class="modal hidden">
        <div class="modal-content">
          <div class="modal-controls">
            <button id="downloadBtn" class="download-btn" title="Descargar foto">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="7,10 12,15 17,10"></polyline>
                <line x1="12" y1="15" x2="12" y2="3"></line>
              </svg>
            </button>
            <button id="closeModal" class="close-modal" title="Cerrar">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
          </div>
          
          <div class="modal-navigation">
            <button id="prevBtn" class="nav-btn prev-btn" title="Anterior">‹</button>
            <img id="modalImage" src="" alt="" />
            <button id="nextBtn" class="nav-btn next-btn" title="Siguiente">›</button>
          </div>
          
          <div class="modal-info">
            <h3 id="modalTitle"></h3>
            <p id="modalDescription"></p>
            <span id="modalCounter"></span>
          </div>
        </div>
      </div>
    )}
  </main>

  <style>
    .album-page {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem 1rem;
    }

    .album-hero {
      text-align: center;
      margin-bottom: 3rem;
      padding-bottom: 2rem;
      border-bottom: 1px solid var(--accent);
    }

    .album-hero h1 {
      font-size: 2.5rem;
      margin-bottom: 1rem;
      color: var(--accent);
    }

    .album-hero p {
      font-size: 1.2rem;
      color: var(--gray);
      margin-bottom: 1.5rem;
    }

    .album-meta {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .photo-count {
      background: var(--accent);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-weight: 600;
    }

    .back-link {
      color: var(--accent);
      text-decoration: none;
      font-weight: 600;
      transition: opacity 0.3s ease;
    }

    .back-link:hover {
      opacity: 0.8;
    }

    .photos-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 2rem;
    }

    .photo-item {
      position: relative;
      border-radius: 12px;
      overflow: hidden;
      cursor: pointer;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      background: var(--gray-light);
    }

    .photo-item:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .photo-thumbnail {
      width: 100%;
      height: 250px;
      object-fit: cover;
      display: block;
    }

    .photo-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
      color: white;
      padding: 2rem 1.5rem 1.5rem;
      transform: translateY(100%);
      transition: transform 0.3s ease;
    }

    .photo-item:hover .photo-overlay {
      transform: translateY(0);
    }

    .photo-overlay h3 {
      margin: 0 0 0.5rem 0;
      font-size: 1.1rem;
      color: var(--accent-light);
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    }

    .photo-overlay p {
      margin: 0;
      font-size: 0.9rem;
      opacity: 0.9;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
    }

    /* No photos message */
    .no-photos-message {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 400px;
      padding: 2rem;
    }

    .no-photos-content {
      text-align: center;
      max-width: 500px;
      padding: 3rem 2rem;
      background: var(--gray-light);
      border-radius: 16px;
      border: 2px dashed var(--gray);
    }

    .no-photos-content svg {
      color: var(--gray);
      margin-bottom: 1.5rem;
      opacity: 0.6;
    }

    .no-photos-content h3 {
      font-size: 1.5rem;
      color: var(--gray-dark);
      margin: 0 0 1rem 0;
    }

    .no-photos-content p {
      color: var(--gray);
      margin: 0 0 2rem 0;
      font-size: 1.1rem;
    }

    .back-button {
      display: inline-block;
      background: var(--accent);
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      text-decoration: none;
      font-weight: 600;
      transition: all 0.3s ease;
    }

    .back-button:hover {
      background: var(--accent-dark);
      transform: translateY(-2px);
    }

    /* Modal Styles */
    .modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.95);
      z-index: 1000;
      display: flex;
      align-items: center;
      justify-content: center;
      backdrop-filter: blur(5px);
    }

    .modal.hidden {
      display: none;
    }

    .modal-content {
      position: relative;
      max-width: 90vw;
      max-height: 90vh;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .modal-controls {
      position: absolute;
      top: -60px;
      right: 0;
      display: flex;
      gap: 1rem;
      z-index: 1001;
    }

    .download-btn,
    .close-modal {
      background: var(--accent);
      border: none;
      border-radius: 50%;
      width: 45px;
      height: 45px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      color: white;
    }

    .download-btn:hover,
    .close-modal:hover {
      background: var(--accent-dark);
      transform: scale(1.1);
    }

    .download-btn svg,
    .close-modal svg {
      width: 20px;
      height: 20px;
    }

    .modal-navigation {
      position: relative;
      display: flex;
      align-items: center;
      gap: 2rem;
    }

    .nav-btn {
      position: absolute;
      background: rgba(255, 255, 255, 0.1);
      border: 2px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      width: 50px;
      height: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 1.5rem;
      color: white;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
    }

    .prev-btn {
      left: -60px;
    }

    .next-btn {
      right: -60px;
    }

    .nav-btn:hover {
      background: var(--accent);
      border-color: var(--accent);
      transform: scale(1.1);
    }

    .nav-btn:disabled {
      opacity: 0.3;
      cursor: not-allowed;
    }

    #modalImage {
      max-width: 80vw;
      max-height: 70vh;
      object-fit: contain;
      border-radius: 8px;
      box-shadow: 0 10px 50px rgba(0, 0, 0, 0.5);
    }

    .modal-info {
      background: rgba(0, 0, 0, 0.8);
      color: white;
      padding: 1.5rem 2rem;
      border-radius: 12px;
      margin-top: 1.5rem;
      text-align: center;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .modal-info h3 {
      margin: 0 0 0.5rem 0;
      color: var(--accent-light);
      font-size: 1.2rem;
    }

    .modal-info p {
      margin: 0 0 1rem 0;
      opacity: 0.9;
    }

    #modalCounter {
      background: var(--accent);
      color: white;
      padding: 0.3rem 0.8rem;
      border-radius: 15px;
      font-size: 0.9rem;
      font-weight: 600;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .album-hero h1 {
        font-size: 2rem;
      }

      .album-meta {
        flex-direction: column;
        gap: 1rem;
      }

      .photos-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
      }

      .photo-thumbnail {
        height: 200px;
      }

      .modal-navigation {
        gap: 1rem;
      }

      .prev-btn {
        left: -45px;
      }

      .next-btn {
        right: -45px;
      }

      .nav-btn {
        width: 40px;
        height: 40px;
        font-size: 1.2rem;
      }

      #modalImage {
        max-width: 95vw;
        max-height: 60vh;
      }

      .modal-info {
        padding: 1rem 1.5rem;
        margin-top: 1rem;
      }
    }
  </style>

  <script>
    // Solo ejecutar el script si hay fotos
    const photosGrid = document.getElementById('photosGrid');
    
    if (photosGrid) {
      let currentIndex = 0;

      // Elementos del DOM
      const modal = document.getElementById('photoModal');
      const modalImage = document.getElementById('modalImage') as HTMLImageElement;
      const modalTitle = document.getElementById('modalTitle');
      const modalDescription = document.getElementById('modalDescription');
      const modalCounter = document.getElementById('modalCounter');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      const closeModal = document.getElementById('closeModal');
      const downloadBtn = document.getElementById('downloadBtn');

      // Abrir modal al hacer clic en una foto
      photosGrid.addEventListener('click', (e) => {
        const photoItem = (e.target as HTMLElement).closest('.photo-item');
        if (photoItem) {
          const index = parseInt(photoItem.getAttribute('data-index') || '0');
          openModal(index);
        }
      });

      // Cerrar modal
      closeModal?.addEventListener('click', () => {
        modal?.classList.add('hidden');
      });

      // Cerrar modal con Escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          modal?.classList.add('hidden');
        } else if (e.key === 'ArrowLeft') {
          navigatePhoto(-1);
        } else if (e.key === 'ArrowRight') {
          navigatePhoto(1);
        }
      });

      // Navegación
      prevBtn?.addEventListener('click', () => navigatePhoto(-1));
      nextBtn?.addEventListener('click', () => navigatePhoto(1));

      // Cerrar modal al hacer clic fuera
      modal?.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.add('hidden');
        }
      });

      // Descargar foto
      downloadBtn?.addEventListener('click', async () => {
        const currentPhoto = getCurrentPhoto();
        if (currentPhoto) {
          try {
            // Intentar descargar vía fetch + blob
            const response = await fetch(currentPhoto.src);
            if (!response.ok) throw new Error('Network response was not ok');
            const blob = await response.blob();
            const url = URL.createObjectURL(blob);

            // Detectar extensión real de la URL (fallback a .jpg)
            const extMatch = currentPhoto.src.match(/\.([a-zA-Z0-9]+)(?:\?|#|$)/);
            const ext = extMatch ? extMatch[1] : 'jpg';

            const a = document.createElement('a');
            a.href = url;
            a.download = `${currentPhoto.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.${ext}`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          } catch (error) {
            console.warn('Descarga automática falló, abriendo en nueva pestaña como fallback', error);
            // Fallback: abrir la imagen en nueva pestaña (útil en iOS donde download puede no funcionar)
            window.open(currentPhoto.src, '_blank');
          }
        }
      });

      function openModal(index: number) {
        currentIndex = index;
        updateModal();
        modal?.classList.remove('hidden');
      }

      function navigatePhoto(direction: number) {
        if (!photosGrid) return;
        const photos = Array.from(photosGrid.querySelectorAll('.photo-item'));
        const newIndex = currentIndex + direction;
        
        if (newIndex >= 0 && newIndex < photos.length) {
          currentIndex = newIndex;
          updateModal();
        }
      }

      function updateModal() {
        if (!photosGrid) return;
        const photos = Array.from(photosGrid.querySelectorAll('.photo-item'));
        const currentPhotoItem = photos[currentIndex] as HTMLElement;
        
        if (currentPhotoItem && modalImage) {
          const img = currentPhotoItem.querySelector('img') as HTMLImageElement;
          const overlay = currentPhotoItem.querySelector('.photo-overlay');
          const title = overlay?.querySelector('h3')?.textContent || '';
          const description = overlay?.querySelector('p')?.textContent || '';
          
          modalImage.src = img.src;
          modalImage.alt = img.alt;
          
          if (modalTitle) modalTitle.textContent = title;
          if (modalDescription) modalDescription.textContent = description;
          if (modalCounter) modalCounter.textContent = `${currentIndex + 1} / ${photos.length}`;
          
          // Actualizar estado de botones
          if (prevBtn) (prevBtn as HTMLButtonElement).disabled = currentIndex === 0;
          if (nextBtn) (nextBtn as HTMLButtonElement).disabled = currentIndex === photos.length - 1;
        }
      }

      function getCurrentPhoto() {
        if (!photosGrid) return null;
        const photos = Array.from(photosGrid.querySelectorAll('.photo-item'));
        const currentPhotoItem = photos[currentIndex] as HTMLElement;
        
        if (currentPhotoItem) {
          const img = currentPhotoItem.querySelector('img') as HTMLImageElement;
          const overlay = currentPhotoItem.querySelector('.photo-overlay');
          const title = overlay?.querySelector('h3')?.textContent || '';
          
          return {
            src: img.src,
            title: title
          };
        }
        return null;
      }
    }
  </script>
</Layout>