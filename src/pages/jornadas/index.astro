---
import { Image } from 'astro:assets';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Header from '../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';
import totaltemporada from '../../assets/totaltemporada.png';
import promediostemporada from '../../assets/promediostemporada.png';
import jornadas from '../../data/jornadas.json';
import '../../styles/jornadas-index.css';

// i18n
import { getTranslations } from '../../i18n/translations';
const t = getTranslations('es').jornadas;

// Importar las im치genes din치micamente
import presJ1 from '../../assets/jornadas/presJ1.png';
import presJ2 from '../../assets/jornadas/presJ2.png';
import presJ3 from '../../assets/jornadas/presJ3.png';
import presJ4 from '../../assets/jornadas/presJ4.png';
import presJ5 from '../../assets/jornadas/presJ5.png';
import presJ6 from '../../assets/jornadas/presJ6.png';
import presJ7 from '../../assets/jornadas/presJ7.png';

// Mapear las im치genes
const imageMap: Record<string, any> = {
	'/src/assets/jornadas/presJ1.png': presJ1,
	'/src/assets/jornadas/presJ2.png': presJ2,
    '/src/assets/jornadas/presJ3.png': presJ3,
    '/src/assets/jornadas/presJ4.png': presJ4,
    '/src/assets/jornadas/presJ5.png': presJ5,
    '/src/assets/jornadas/presJ6.png': presJ6,
    '/src/assets/jornadas/presJ7.png': presJ7,
};

// Ordenar jornadas por fecha (m치s recientes primero)
const sortedJornadas = jornadas
	.map(jornada => ({
		...jornada,
		pubDate: new Date(jornada.pubDate),
		heroImage: imageMap[jornada.heroImage]
	}))
	.sort((a, b) => b.pubDate.valueOf() - a.pubDate.valueOf());
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
			<!-- <h2>Estad칤sticas de la temporada:</h2> -->
			<section>
				<ul>
					{
						sortedJornadas.map((jornada) => (
							<li class={!jornada.available ? 'jornada-unavailable' : ''}>
								{jornada.available ? (
									<a href={`/jornadas/${jornada.slug}/`}>
										{jornada.heroImage && (
											<div class="jornada-thumb">
												<Image width={720} height={360} src={jornada.heroImage} alt="" />
											</div>
										)}
										<div class="content">
											<h4 class="title">{jornada.title}</h4>
											<p class="date">
												<FormattedDate date={jornada.pubDate} />
											</p>
										</div>
									</a>
								) : (
									<div>
										{jornada.heroImage && (
											<div class="jornada-thumb">
												<Image width={720} height={360} src={jornada.heroImage} alt="" />
											</div>
										)}
										<div class="content">
											<h4 class="title">{jornada.title}</h4>
											<p class="date">
												<FormattedDate date={jornada.pubDate} />
											</p>
										</div>
										<div class="coming-soon-badge">
											<span data-i18n="comingSoon">{t.comingSoon}</span>
											<p style="margin-bottom: 0.2%; margin-top: 0.2%">游뎹 <span>{jornada.time}</span></p>
										</div>
									</div>
								)}
							</li>
						))
					}
				</ul>
				<!--
				<div class="table">
					<h3 class="table-title">Tabla total de temporada</h3>
					<img src={totaltemporada.src} alt="tabla de estad칤sticas totales de temporada" class="table-img"/>
				</div>
				<div class="table">
					<h3 class="table-title">Tabla promedios de temporada</h3>
					<img src={promediostemporada.src} alt="tabla de estad칤sticas promedios de temporada" class="table-img"/>
				</div>
				-->
			</section>
		</main>
		<Footer />
		
		<script>
			import { translations } from '../../i18n/translations';
			import type { Language } from '../../i18n/translations';
			
			function updatePageLanguage(lang: Language) {
				const t = translations[lang].jornadas;
				
				// Actualizar todos los elementos con data-i18n
				document.querySelectorAll('[data-i18n]').forEach(element => {
					const key = element.getAttribute('data-i18n') as keyof typeof t;
					if (key && t[key]) {
						const translation = t[key] as string;
						element.textContent = translation;
					}
				});
			}
			
			function initLanguageSync() {
				const currentLang = (document.documentElement.getAttribute('data-language') || 'es') as Language;
				updatePageLanguage(currentLang);
				
				document.addEventListener('click', (e) => {
					const target = e.target as HTMLElement;
					const button = target.closest('.language-toggle-btn');
					
					if (button) {
						setTimeout(() => {
							const newLang = (document.documentElement.getAttribute('data-language') || 'es') as Language;
							updatePageLanguage(newLang);
						}, 50);
					}
				});
			}
			
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', initLanguageSync);
			} else {
				initLanguageSync();
			}
			
			document.addEventListener('astro:page-load', initLanguageSync);
		</script>
	</body>
</html>
